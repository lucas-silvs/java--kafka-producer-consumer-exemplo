buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
		classpath 'com.github.davidmc24.gradle.plugin:gradle-avro-plugin:1.9.1'
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}
//validar se existe arquivos .proto
def protoDir = file("${projectDir}/src/main/proto")

if (protoDir.exists() && protoDir.listFiles().any { it.name.endsWith('.proto') }) {
	apply plugin: 'com.google.protobuf'

} else {
	logger.warn("Diretório de arquivos .proto não encontrado ou vazio. Ignorando compilação do protobuf.")
}

//validar se existe arquivos .avsc
def avroDir = file("${projectDir}/src/main/avro")

if (avroDir.exists() && avroDir.listFiles().any { it.name.endsWith('.avsc') }) {
	apply plugin: 'com.github.davidmc24.gradle.plugin.avro'

} else {
	logger.warn("Diretório de arquivos .avsc não encontrado ou vazio. Ignorando compilação do avro.")
}

group = 'com.lucassilvs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'


	//Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	//AVRO - Schema Registry
	implementation 'io.confluent:kafka-avro-serializer:7.6.1'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'


	implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.3.1'
	// metrics prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus:1.13.1'


}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}
